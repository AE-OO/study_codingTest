'''
    최소한 한 칸 이상 떨어진 식량창고를 약탈해야 한다.
'''

n = int(input())
f = list(map(int, input().split()))

# DP 테이블 초기화
d = [0] * 100

# 첫번째 창고를 털었다고 가정
d[0] = f[0]

# 근데 첫번째 창고와 두번째 창고는 인접해 있으니까 둘 중 최대인 곳 한 곳만 털 수 있음
# 그래서 max 값을 구해서 그 창고를 텀
d[1] = max(f[0], f[1])

# 초기화된 0과 1의 경우는 빼고 2부터 시작
for i in range(2, n):
    # 세번째 창고에서는 두번째 창고의 식량만 갖거나 첫번째 창고 + 세번째 창고의 식량 둘 중 하나를 또 선택할 수 있음
    d[i] = max(d[i - 1], d[i - 2] + f[i])

'''
    첫번째는 d[0] = f[0]
    두번째는 d[1] = max(f[0], f[1]) = max(1,3) = 3
    세번째는 d[2] = max(d[1], d[0] + f[2]) = max(3,2) = 3
    네번째는 d[3] = max(d[2], d[1] + f[3]) = max(3,4) = 4
    다섯번째는 d[4] = max(d[3], d[2] + f[4]) = max(4,8) = 8
'''

print(d[n - 1])
